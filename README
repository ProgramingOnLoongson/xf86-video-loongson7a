X.org graphics driver for loongson7A

Features:
- EXA and Xv GC320 2D acceleration with etnaviv
- DRI2 & DRI3

Kernel version note for etnaviv driver:
- 4.4x is not tested anymore
- There is a bug in etnaviv driver in 4.9x, missing mutex make kernel to hang : https://github.com/torvalds/linux/blob/v4.9/drivers/gpu/drm/etnaviv/etnaviv_gem.c#L557
- It seems this is fixed in 4.14x (untested): https://github.com/torvalds/linux/blob/v4.14/drivers/gpu/drm/etnaviv/etnaviv_gem.c#L561

This driver only use GC320 2D capabilities to provide X11 acceleration, it does not give any 3D acceleration.
For 3D acceleration, you could use https://github.com/TexasInstruments/dri3wsegl which is a DRI3 plugin for PVR SGX 544MP 3D chip available in AM57x. You just need to install SGX drivers and dri3wsegl as documented in the repository. Once done, just restart the X server to activate acceleration in omap5 X11. You can then check if the driver is activated using eglinfo:
$ eglinfo
EGL config number: 0
EGL vendor string: Imagination Technologies
EGL version string: 1.4 build 1.14@3699939 (MAIN)
EGL extensions: EGL_IMG_client_api_ogl EGL_KHR_image EGL_KHR_image_base EGL_KHR_gl_texture_2D_image EGL_KHR_gl_texture_cubemap_image EGL_KHR_gl_renderbuffer_image EGL_KHR_vg_parent_image EGL_IMG_cl_image EGL_KHR_fence_sync EGL_IMG_context_priority EGL_IMG_hibernate_process EGL_IMG_image_plane_attribs EGL_KHR_surfaceless_context EGL_KHR_wait_sync EGL_KHR_create_context EGL_WL_bind_wayland_display EGL_EXT_image_dma_buf_import
EGL client APIs are: OpenGL_ES

Install:
./autogen.sh
./configure --prefix=/usr --libdir=/usr/lib64
make
sudo make install

A simple xorg.conf configuration is located in conf dir: loongson.conf


Based on 
- https://cgit.freedesktop.org/xorg/driver/xf86-video-armsoc
- https://github.com/xobs/xserver-xorg-video-armada
- https://github.com/mxOBS/deb-pkg_xserver-xorg-video-imx-viv
- https://github.com/endlessm/xf86-video-armsoc
- https://github.com/tobiasjakobi/xf86-video-armsoc


Summary of bo reference counting
--------------------------------
The Screen takes a ref on the scanout bo in InitScreen and drops it in ScreenClose.
When the scanout bo changes (due to a flip or a modeset) the ref is moved from the
old bo to the new one by set_scanout_bo.

Pixmaps take a ref on their bo(s) when created in ARMSOCCreatePixmap2 and drop it
in ARMSOCDestroyPixmap.

If ARMSOCModifyPixmapHeader points a pixmap at anything other than the scanout bo
then the ref to the existing bo (if any) is dropped.

If ARMSOCModifyPixmapHeader points a pixmap at the scanout bo the ref is moved from
the old bo to the new

If ARMSOCModifyPixmapHeader changes the size of the pixmap's bo the ref is dropped,
a new bo created and a ref taken on that.

resize_scanout_bo creates and takes a ref on the new bo and drops its ref when the
new bo becomes the scanout bo and the Screen has taken a ref.

The swap chain takes a ref on the src and dst bos when a swap is scheduled in
ARMSOCDRI2ScheduleSwap and drops them in ARMSOCDRI2SwapComplete after the src
becomes pARMSOC->scanout and the screen takes a ref.

The cursor takes a ref on its bo in drmmode_cursor_init and drops it in
drmmode_cursor_fini
